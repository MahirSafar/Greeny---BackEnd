// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer.DAL;

#nullable disable

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230627202103_CreateIsBlockColumnInAppUser")]
    partial class CreateIsBlockColumnInAppUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DomainLayer.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Baskets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "b59d27ed-5ac4-4cbc-819e-c36b80e2d334",
                            Count = 0,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8354),
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "f565482b-e971-4580-8493-e5c5ba0479c9",
                            Count = 0,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8368),
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8488),
                            Image = "01.jpg",
                            Name = "Vegan Lover",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8489),
                            Image = "03.jpg",
                            Name = "Organic Foody",
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8497),
                            Image = "01.jpg",
                            Name = "Vegetables",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8498),
                            Image = "02.jpg",
                            Name = "Foods",
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Percent")
                        .HasColumnType("tinyint");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8509),
                            Name = "Black Friday",
                            Percent = (byte)50,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8510),
                            Name = "No Discount",
                            Percent = (byte)0,
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<int>("SKUCode")
                        .HasColumnType("int");

                    b.Property<int>("SalesCount")
                        .HasColumnType("int");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.Property<int>("StockCount")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("RatingId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8517),
                            Description = "Cucumbers are commonly mistaken for vegetables. But in fact they are fruits, specifically berries. The long, green berries of the cucumber plant are what you usually find in your salads and sandwiches. They are made up of over 90% water, making them excellent for staying hydrated.",
                            DiscountId = 1,
                            Name = "Cucumber",
                            Price = 50m,
                            RatingId = 1,
                            SKUCode = 12345,
                            SalesCount = 80,
                            SoftDelete = false,
                            StockCount = 100,
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 2,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8521),
                            Description = "The standard eggplant is an oval or pear-shaped, glossy, purplish fruit 6 to 9 inches long. Japanese and oriental varieties tend to be elongated and slender with a thinner, more delicate skin. Ornamental varieties are edible and tend to produce small, white-skinned, oval-shaped fruit.",
                            DiscountId = 2,
                            Name = "Eggplant",
                            Price = 100m,
                            RatingId = 2,
                            SKUCode = 54321,
                            SalesCount = 180,
                            SoftDelete = false,
                            StockCount = 200,
                            SubCategoryId = 2
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.ProductBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBaskets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasketId = 1,
                            ProductCount = 0,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            BasketId = 2,
                            ProductCount = 0,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8548),
                            Image = "01.jpg",
                            IsMain = true,
                            ProductId = 1,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8549),
                            Image = "02.jpg",
                            IsMain = false,
                            ProductId = 1,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8550),
                            Image = "03.jpg",
                            IsMain = true,
                            ProductId = 2,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8551),
                            Image = "04.jpg",
                            IsMain = false,
                            ProductId = 2,
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            TagId = 2
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.ProductWishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishlistId");

                    b.ToTable("ProductWishlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            WishlistId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            WishlistId = 2
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("RatingCount")
                        .HasColumnType("tinyint");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8592),
                            RatingCount = (byte)1,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8626),
                            RatingCount = (byte)2,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8627),
                            RatingCount = (byte)3,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8628),
                            RatingCount = (byte)4,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8628),
                            RatingCount = (byte)5,
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RatingId")
                        .HasColumnType("int");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RatingId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "b59d27ed-5ac4-4cbc-819e-c36b80e2d334",
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8640),
                            Describe = "Very tasty, it is the best cucumber i have ever eaten.",
                            ProductId = 1,
                            RatingId = 1,
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "f565482b-e971-4580-8493-e5c5ba0479c9",
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8641),
                            Describe = "It is a fresh vegetables. I liked it.",
                            ProductId = 2,
                            RatingId = 2,
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DomainLayer.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8651),
                            Name = "Cucumber",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8652),
                            Name = "Eggplant",
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8659),
                            Name = "Organic",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8660),
                            Name = "Fruits",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8661),
                            Name = "Vegan",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8661),
                            Name = "Healthy",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8662),
                            Name = "Seafood",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8662),
                            Name = "Crunchy",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8663),
                            Name = "Savory",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8664),
                            Name = "Gourmet",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8664),
                            Name = "Satisfying",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8665),
                            Name = "Delicious",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8665),
                            Name = "Fresh",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8666),
                            Name = "Juicy",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8666),
                            Name = "SpiceUp",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8668),
                            Name = "Tasty",
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8668),
                            Name = "Zesty",
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("DomainLayer.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SoftDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = "b59d27ed-5ac4-4cbc-819e-c36b80e2d334",
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8680),
                            SoftDelete = false
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = "f565482b-e971-4580-8493-e5c5ba0479c9",
                            CreateDate = new DateTime(2023, 6, 28, 0, 21, 2, 511, DateTimeKind.Local).AddTicks(8681),
                            SoftDelete = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.Basket", b =>
                {
                    b.HasOne("DomainLayer.Entities.AppUser", "AppUser")
                        .WithOne("Basket")
                        .HasForeignKey("DomainLayer.Entities.Basket", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product", b =>
                {
                    b.HasOne("DomainLayer.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Rating", "Rating")
                        .WithMany("Products")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Discount");

                    b.Navigation("Rating");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("DomainLayer.Entities.ProductBasket", b =>
                {
                    b.HasOne("DomainLayer.Entities.Basket", "Basket")
                        .WithMany("ProductBaskets")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Product", "Product")
                        .WithMany("ProductBaskets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DomainLayer.Entities.ProductImage", b =>
                {
                    b.HasOne("DomainLayer.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DomainLayer.Entities.ProductTag", b =>
                {
                    b.HasOne("DomainLayer.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DomainLayer.Entities.ProductWishlist", b =>
                {
                    b.HasOne("DomainLayer.Entities.Product", "Product")
                        .WithMany("ProductWishlists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Wishlist", "Wishlist")
                        .WithMany("ProductWishlists")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("DomainLayer.Entities.Review", b =>
                {
                    b.HasOne("DomainLayer.Entities.AppUser", "AppUser")
                        .WithMany("Reviews")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.Rating", "Rating")
                        .WithMany("Reviews")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("DomainLayer.Entities.SubCategory", b =>
                {
                    b.HasOne("DomainLayer.Entities.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DomainLayer.Entities.Wishlist", b =>
                {
                    b.HasOne("DomainLayer.Entities.AppUser", "AppUser")
                        .WithOne("Wishlist")
                        .HasForeignKey("DomainLayer.Entities.Wishlist", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DomainLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DomainLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DomainLayer.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLayer.Entities.AppUser", b =>
                {
                    b.Navigation("Basket")
                        .IsRequired();

                    b.Navigation("Reviews");

                    b.Navigation("Wishlist")
                        .IsRequired();
                });

            modelBuilder.Entity("DomainLayer.Entities.Basket", b =>
                {
                    b.Navigation("ProductBaskets");
                });

            modelBuilder.Entity("DomainLayer.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainLayer.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("DomainLayer.Entities.Discount", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainLayer.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductBaskets");

                    b.Navigation("ProductTags");

                    b.Navigation("ProductWishlists");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DomainLayer.Entities.Rating", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DomainLayer.Entities.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DomainLayer.Entities.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("DomainLayer.Entities.Wishlist", b =>
                {
                    b.Navigation("ProductWishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
